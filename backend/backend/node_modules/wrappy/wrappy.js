// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy;
function wrappy(fn, cb) {
	if (fn && cb) return wrappy(fn)(cb);

	if (typeof fn !== "function") throw new TypeError("need wrapper function");

	// biome-ignore lint/complexity/useArrowFunction: <explanation>
	// biome-ignore lint/complexity/noForEach: <explanation>
	Object.keys(fn).forEach(function (k) {
		wrapper[k] = fn[k];
	});

	return wrapper;

	function wrapper() {
		// biome-ignore lint/style/noVar: <explanation>
		// biome-ignore lint/style/noArguments: <explanation>
		var args = new Array(arguments.length);
		// biome-ignore lint/style/noVar: <explanation>
		// biome-ignore lint/correctness/noInnerDeclarations: <explanation>
		for (var i = 0; i < args.length; i++) {
			// biome-ignore lint/style/noArguments: <explanation>
			args[i] = arguments[i];
		}
		// biome-ignore lint/style/noVar: <explanation>
		var ret = fn.apply(this, args);
		// biome-ignore lint/style/noVar: <explanation>
		var cb = args[args.length - 1];
		if (typeof ret === "function" && ret !== cb) {
			// biome-ignore lint/complexity/useArrowFunction: <explanation>
			// biome-ignore lint/complexity/noForEach: <explanation>
			Object.keys(cb).forEach(function (k) {
				ret[k] = cb[k];
			});
		}
		return ret;
	}
}
